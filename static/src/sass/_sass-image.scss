// =================================================================
// This file is dynamically generated by gulp-compass-imagehelper
// Do NOT edit!
// =================================================================

// Returns if the image is accessible for these image-helpers
// Note: Not part of the official compass functions, but still useful
@function image-exists($image) {
  @return map-has-key($compass-imagehelper-imagesmap, $image);
}

// Embeds the contents of an image directly inside your stylesheet, eliminating the need for another HTTP request. For small images, this can be a performance
// benefit at the cost of a larger generated CSS file.
@function inline-image($image) {
  @if image-exists($image) {
    $list: map-get($compass-imagehelper-imagesmap, $image);
    @return unquote(map-get($list, 'data'));
  }
  @warn "Image '#{$image}' not found.";
  @return null;
}

// Returns the width of the image found at the path supplied by $image relative to your project's images directory.
@function image-width($image) {
  @if image-exists($image) {
    $list: map-get($compass-imagehelper-imagesmap, $image);
    $width: unquote(map-get($list, 'width'));
    @if ($width and str-length($width) > 0) {
      @return number($width) * 1px;
    }
  }
  @warn "Image '#{$image}' not found.";
  @return null;
}

// Returns the height of the image found at the path supplied by $image relative to your project's images directory.
@function image-height($image) {
  @if image-exists($image) {
    $list: map-get($compass-imagehelper-imagesmap, $image);
    $height: unquote(map-get($list, 'height'));
    @if ($height and str-length($height) > 0) {
      @return number($height) * 1px;
    }
  }
  @warn "Image '#{$image}' not found.";
  @return null;
}

// Generates a path to an asset found relative to the project's images directory.
// Passing a true value as the second argument will cause only the path to be returned instead of a url() function
// The third argument is used to control the cache buster on a per-use basis. When set to false no cache buster will be used.
// When true a md5-hash of the file is appended to the url. When a string, that value will be used as the cache buster.
@function image-url($image, $only-path: false, $cache-buster: false) {
  $result: $compass-imagehelper-path-prefix + $image;

  @if not(image-exists($image)) {
    @warn "Image '#{$image}' not found.";
  } @else {
    @if (type-of($cache-buster) == string) {
      $result: $result + '?' + $cache-buster;
    }

    @if ($cache-buster == true) {
      $list: map-get($compass-imagehelper-imagesmap, $image);
      $hash: map-get($list, 'hash');
      $result: $result + '?' + $hash;
    }
  }

  $result: quote($result);

  @if ($only-path == false) {
    $result: url($result);
  }

  @return $result;
}

// Two helper functions for casting string to number by Hugo Giraudel
// http://hugogiraudel.com/2014/01/15/sass-string-to-number/
// http://sassmeister.com/gist/9647408
@function _length($number, $unit) {
  $strings: 'px' 'cm' 'mm' '%' 'ch' 'pica' 'in' 'em' 'rem' 'pt' 'pc' 'ex' 'vw' 'vh' 'vmin' 'vmax';
  $units: 1px 1cm 1mm 1% 1ch 1 pica 1in 1em 1rem 1pt 1pc 1ex 1vw 1vh 1vmin 1vmax;
  $index: index($strings, $unit);

  @if not ($index) {
    @warn "Unknown unit `#{$unit}`.";
    @return false;
  }

  @return $number * nth($units, $index);
}

@function number($string) {
  // Matrices
  $strings: '0' '1' '2' '3' '4' '5' '6' '7' '8' '9';
  $numbers: 0 1 2 3 4 5 6 7 8 9;

  // Result
  $result: 0;
  $divider: 0;
  $minus: false;

  // Looping through all characters
  @for $i from 1 through str-length($string) {
    $character: str-slice($string, $i, $i);
    $index: index($strings, $character);

    @if $character == '-' {
      $minus: true;
    } @else if $character == '.' {
      $divider: 1;
    } @else {
      @if not ($index) {
        $result: if($minus, $result * -1, $result);
        @return _length($result, str-slice($string, $i));
      }

      $number: nth($numbers, $index);

      @if $divider == 0 {
        $result: $result * 10;
      } @else {
        // Move the decimal dot to the left
        $divider: $divider * 10;
        $number: $number / $divider;
      }

      $result: $result + $number;
    }
  }

  @return if($minus, $result * -1, $result);
}

$compass-imagehelper-path-prefix: '../../images/';

$compass-imagehelper-imagesmap: (
  'SVG/dislike-active.svg': (
    width: '495',
    height: '491',
    data: 'url("data:image/svg+xml;charset=utf8,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 495 491.51%22%3E%3Cdefs%3E%3Cstyle%3E.cls-1%7Bfill:%23fff;%7D.cls-2%7Bfill:none;stroke:%23fff;stroke-miterlimit:10;stroke-width:43.5px;%7D%3C/style%3E%3C/defs%3E%3Ctitle%3Edislike-active%3C/title%3E%3Cg id=%22active%22%3E%3Cpath class=%22cls-1%22 d=%22M248,53A193,193,0,0,1,384.47,382.44,193,193,0,0,1,111.53,109.49,191.75,191.75,0,0,1,248,53m0-40C119.32,13,15,117.28,15,246S119.32,479,248,479,481,374.65,481,246,376.68,13,248,13Z%22/%3E%3Cline class=%22cls-2%22 x1=%22147.5%22 y1=%22160.46%22 x2=%22350.5%22 y2=%22330.46%22/%3E%3Cline class=%22cls-2%22 x1=%22144.5%22 y1=%22330.46%22 x2=%22345.5%22 y2=%22160.46%22/%3E%3C/g%3E%3C/svg%3E")',
    hash: 'a4feefded2734b66bfa6d97ae8ccaf78'
  ),
  'SVG/dislike-disabled.svg': (
    width: '495',
    height: '491',
    data: 'url("data:image/svg+xml;charset=utf8,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 495 491.51%22%3E%3Cdefs%3E%3Cstyle%3E.cls-1%7Bfill:%23ccc;%7D.cls-2%7Bfill:none;stroke:%23ccc;stroke-miterlimit:10;stroke-width:43.5px;%7D%3C/style%3E%3C/defs%3E%3Ctitle%3Edislike-disabled%3C/title%3E%3Cg id=%22disabled%22%3E%3Cpath class=%22cls-1%22 d=%22M248,54A193,193,0,0,1,384.47,383.44,193,193,0,0,1,111.53,110.49,191.75,191.75,0,0,1,248,54m0-40C119.32,14,15,118.28,15,247S119.32,480,248,480,481,375.65,481,247,376.68,14,248,14Z%22/%3E%3Cline class=%22cls-2%22 x1=%22147.5%22 y1=%22161.46%22 x2=%22350.5%22 y2=%22331.46%22/%3E%3Cline class=%22cls-2%22 x1=%22144.5%22 y1=%22331.46%22 x2=%22345.5%22 y2=%22161.46%22/%3E%3C/g%3E%3C/svg%3E")',
    hash: '911c45bc3b72a450388efa7cfbbc69da'
  ),
  'SVG/dislike.svg': (
    width: '492',
    height: '496',
    data: 'url("data:image/svg+xml;charset=utf8,%3Csvg id=%22normal%22 xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 492.7 496.24%22%3E%3Cdefs%3E%3Cstyle%3E.cls-1%7Bfill:%23ed1c24;%7D.cls-2%7Bfill:none;stroke:%23ed1c24;stroke-miterlimit:10;stroke-width:43.5px;%7D%3C/style%3E%3C/defs%3E%3Ctitle%3Edislike%3C/title%3E%3Cpath class=%22cls-1%22 d=%22M246.4,55.19A193,193,0,0,1,382.87,384.67a193,193,0,0,1-272.94-273A191.75,191.75,0,0,1,246.4,55.19m0-40c-128.68,0-233,104.32-233,233s104.32,233,233,233,233-104.31,233-233-104.31-233-233-233Z%22/%3E%3Cline class=%22cls-2%22 x1=%22145.9%22 y1=%22162.69%22 x2=%22348.9%22 y2=%22332.69%22/%3E%3Cline class=%22cls-2%22 x1=%22142.9%22 y1=%22332.69%22 x2=%22343.9%22 y2=%22162.69%22/%3E%3C/svg%3E")',
    hash: '851b9c1d2cd36cb3d72d9a48ee843100'
  ),
  'SVG/like-active.svg': (
    width: '495',
    height: '491',
    data: 'url("data:image/svg+xml;charset=utf8,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 495 491.51%22%3E%3Cdefs%3E%3Cstyle%3E.cls-1%7Bfill:%23fff;%7D.cls-2%7Bfill:none;stroke:%23fff;stroke-miterlimit:10;stroke-width:43.5px;%7D%3C/style%3E%3C/defs%3E%3Ctitle%3Elike-active%3C/title%3E%3Cg id=%22active%22%3E%3Cpath class=%22cls-1%22 d=%22M247,53A193,193,0,0,1,383.47,382.44,193,193,0,0,1,110.53,109.49,191.75,191.75,0,0,1,247,53m0-40C118.32,13,14,117.28,14,246S118.32,479,247,479,480,374.65,480,246,375.68,13,247,13Z%22/%3E%3Cpath class=%22cls-2%22 d=%22M131.5,254.46c20.62,14.56,80,77,80,77s89.08-131.89,142-170%22/%3E%3C/g%3E%3C/svg%3E")',
    hash: '8e91e9aed75f1c936ab233ac5d411ab5'
  ),
  'SVG/like-disabled.svg': (
    width: '495',
    height: '491',
    data: 'url("data:image/svg+xml;charset=utf8,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 495 491.51%22%3E%3Cdefs%3E%3Cstyle%3E.cls-1%7Bfill:%23ccc;%7D.cls-2%7Bfill:none;stroke:%23ccc;stroke-miterlimit:10;stroke-width:43.5px;%7D%3C/style%3E%3C/defs%3E%3Ctitle%3Elike-disabled%3C/title%3E%3Cg id=%22disabled%22%3E%3Cpath class=%22cls-1%22 d=%22M247,54A193,193,0,0,1,383.47,383.44,193,193,0,0,1,110.53,110.49,191.75,191.75,0,0,1,247,54m0-40C118.32,14,14,118.28,14,247S118.32,480,247,480,480,375.65,480,247,375.68,14,247,14Z%22/%3E%3Cpath class=%22cls-2%22 d=%22M131.5,255.46c20.62,14.56,80,77,80,77s89.08-131.89,142-170%22/%3E%3C/g%3E%3C/svg%3E")',
    hash: '2685de72669ed3d1ac5096767131df8d'
  ),
  'SVG/like.svg': (
    width: '494',
    height: '496',
    data: 'url("data:image/svg+xml;charset=utf8,%3Csvg id=%22normal%22 xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 494.33 496.08%22%3E%3Cdefs%3E%3Cstyle%3E.cls-1%7Bfill:%23009245;%7D.cls-2%7Bfill:none;stroke:%23009245;stroke-miterlimit:10;stroke-width:43.5px;%7D%3C/style%3E%3C/defs%3E%3Ctitle%3Elike%3C/title%3E%3Cpath class=%22cls-1%22 d=%22M246.67,55A193,193,0,0,1,383.14,384.51,193,193,0,1,1,110.2,111.57,191.73,191.73,0,0,1,246.67,55m0-40c-128.69,0-233,104.32-233,233S118,481,246.67,481s233-104.32,233-233S375.35,15,246.67,15Z%22/%3E%3Cpath class=%22cls-2%22 d=%22M131.17,256.54c20.62,14.56,80,77,80,77s89.07-131.89,142-170%22/%3E%3C/svg%3E")',
    hash: 'f8c2d8235865951a45716e27cdaea6d3'
  ),
);

%SVG-dislike-active-svg {
  // Available properties:
  // prefix: ;
  // width: 495;
  // height: 491;
  // filename: dislike-active.svg;
  // basename: dislike-active;
  // dirname: SVG;
  // ext: .svg;
  // path: SVG/dislike-active.svg;
  // fullname: SVG-dislike-active-svg;
  // mime: image/svg+xml;
  // hash: a4feefded2734b66bfa6d97ae8ccaf78;
  background-image: inline-image('SVG/dislike-active.svg');
}

%SVG-dislike-disabled-svg {
  // Available properties:
  // prefix: ;
  // width: 495;
  // height: 491;
  // filename: dislike-disabled.svg;
  // basename: dislike-disabled;
  // dirname: SVG;
  // ext: .svg;
  // path: SVG/dislike-disabled.svg;
  // fullname: SVG-dislike-disabled-svg;
  // mime: image/svg+xml;
  // hash: 911c45bc3b72a450388efa7cfbbc69da;
  background-image: inline-image('SVG/dislike-disabled.svg');
}

%SVG-dislike-svg {
  // Available properties:
  // prefix: ;
  // width: 492;
  // height: 496;
  // filename: dislike.svg;
  // basename: dislike;
  // dirname: SVG;
  // ext: .svg;
  // path: SVG/dislike.svg;
  // fullname: SVG-dislike-svg;
  // mime: image/svg+xml;
  // hash: 851b9c1d2cd36cb3d72d9a48ee843100;
  background-image: inline-image('SVG/dislike.svg');
}

%SVG-like-active-svg {
  // Available properties:
  // prefix: ;
  // width: 495;
  // height: 491;
  // filename: like-active.svg;
  // basename: like-active;
  // dirname: SVG;
  // ext: .svg;
  // path: SVG/like-active.svg;
  // fullname: SVG-like-active-svg;
  // mime: image/svg+xml;
  // hash: 8e91e9aed75f1c936ab233ac5d411ab5;
  background-image: inline-image('SVG/like-active.svg');
}

%SVG-like-disabled-svg {
  // Available properties:
  // prefix: ;
  // width: 495;
  // height: 491;
  // filename: like-disabled.svg;
  // basename: like-disabled;
  // dirname: SVG;
  // ext: .svg;
  // path: SVG/like-disabled.svg;
  // fullname: SVG-like-disabled-svg;
  // mime: image/svg+xml;
  // hash: 2685de72669ed3d1ac5096767131df8d;
  background-image: inline-image('SVG/like-disabled.svg');
}

%SVG-like-svg {
  // Available properties:
  // prefix: ;
  // width: 494;
  // height: 496;
  // filename: like.svg;
  // basename: like;
  // dirname: SVG;
  // ext: .svg;
  // path: SVG/like.svg;
  // fullname: SVG-like-svg;
  // mime: image/svg+xml;
  // hash: f8c2d8235865951a45716e27cdaea6d3;
  background-image: inline-image('SVG/like.svg');
}

